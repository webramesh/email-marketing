// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Multi-tenant models
model Tenant {
  id                String              @id @default(cuid())
  name              String
  subdomain         String              @unique
  customDomain      String?             @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             User[]
  campaigns         Campaign[]
  subscribers       Subscriber[]
  lists             List[]
  automations       Automation[]
  sendingServers    SendingServer[]
  domains           Domain[]
  forms             Form[]
  supportTickets    SupportTicket[]
  subscriptionPlan  SubscriptionPlan?   @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?
  
  // New relationships
  campaignAnalytics CampaignAnalytics[]
  emailEvents       EmailEvent[]
  automationExecutions AutomationExecution[]
  emailTemplates    EmailTemplate[]
  segments          Segment[]
  emailVerifications EmailVerification[]
  bounceComplaints  BounceComplaint[]
  apiKeys           ApiKey[]
  webhooks          Webhook[]
  payments          Payment[]
  auditLogs         AuditLog[]

  @@map("tenants")
}

model User {
  id                String      @id @default(cuid())
  email             String
  name              String?
  password          String
  role              UserRole    @default(USER)
  mfaEnabled        Boolean     @default(false)
  mfaSecret         String?
  mfaBackupCodes    Json?
  mfaLastVerified   DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([email, tenantId])
  @@index([tenantId])
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  SUPPORT
}

// Basic models for email marketing
model Campaign {
  id                String      @id @default(cuid())
  name              String
  subject           String
  preheader         String?
  content           String      @db.LongText
  plainTextContent  String?     @db.LongText
  status            CampaignStatus @default(DRAFT)
  campaignType      CampaignType @default(REGULAR)
  
  // Scheduling
  scheduledAt       DateTime?
  sentAt            DateTime?
  
  // Settings
  fromName          String?
  fromEmail         String?
  replyToEmail      String?
  trackOpens        Boolean     @default(true)
  trackClicks       Boolean     @default(true)
  
  // A/B Testing
  isAbTest          Boolean     @default(false)
  abTestSettings    Json?
  
  // Lists and Segments
  targetLists       Json?       // Array of list IDs
  targetSegments    Json?       // Array of segment IDs
  
  // Template and Design
  templateData      Json?       // Email builder data
  customCss         String?     @db.LongText
  
  // Statistics (cached for performance)
  totalRecipients   Int         @default(0)
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  
  // Metadata
  tags              Json?       // Array of tags for organization
  notes             String?     @db.LongText
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  analytics         CampaignAnalytics?
  emailEvents       EmailEvent[]
  bounceComplaints  BounceComplaint[]
  template          EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId        String?
  
  // A/B Test variants
  abTestVariants    CampaignVariant[]

  @@index([tenantId])
  @@index([templateId])
  @@index([status])
  @@index([campaignType])
  @@index([scheduledAt])
  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum CampaignType {
  REGULAR
  AB_TEST
  AUTOMATION
  TRANSACTIONAL
}

// A/B Test Campaign Variants
model CampaignVariant {
  id                String      @id @default(cuid())
  campaign          Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String
  name              String      // e.g., "Variant A", "Variant B"
  subject           String
  preheader         String?
  content           String      @db.LongText
  templateData      Json?
  percentage        Int         @default(50) // Percentage of audience for this variant
  
  // Statistics for this variant
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  
  // A/B test results
  conversionRate    Float       @default(0)
  isWinner          Boolean     @default(false)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([campaignId])
  @@map("campaign_variants")
}

model Subscriber {
  id                String      @id @default(cuid())
  email             String
  firstName         String?
  lastName          String?
  status            SubscriberStatus @default(ACTIVE)
  customFields      Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  lists             ListSubscriber[]
  
  // New relationships
  emailEvents       EmailEvent[]
  automationExecutions AutomationExecution[]
  bounceComplaints  BounceComplaint[]

  @@unique([email, tenantId])
  @@index([tenantId])
  @@map("subscribers")
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
  INVALID
}

model List {
  id                String      @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  subscribers       ListSubscriber[]

  @@index([tenantId])
  @@map("lists")
}

model ListSubscriber {
  id                String      @id @default(cuid())
  list              List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId            String
  subscriber        Subscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String
  createdAt         DateTime    @default(now())

  @@unique([listId, subscriberId])
  @@index([listId])
  @@index([subscriberId])
  @@map("list_subscribers")
}

model Automation {
  id                String      @id @default(cuid())
  name              String
  status            AutomationStatus @default(DRAFT)
  triggerType       String
  triggerConfig     Json
  workflowData      Json
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // New relationships
  workflowSteps     WorkflowStep[]
  executions        AutomationExecution[]

  @@index([tenantId])
  @@map("automations")
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

model SendingServer {
  id                String      @id @default(cuid())
  name              String
  type              String
  configuration     Json
  isActive          Boolean     @default(true)
  priority          Int         @default(1)
  dailyLimit        Int?
  hourlyLimit       Int?
  dailySent         Int         @default(0)
  hourlySent        Int         @default(0)
  totalSent         Int         @default(0)
  totalFailed       Int         @default(0)
  lastUsedAt        DateTime?
  lastResetAt       DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([isActive])
  @@index([priority])
  @@map("sending_servers")
}

model Domain {
  id                String      @id @default(cuid())
  name              String
  isVerified        Boolean     @default(false)
  dkimSelector      String?
  dkimPrivateKey    String?     @db.LongText
  dkimPublicKey     String?     @db.LongText
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([name, tenantId])
  @@index([tenantId])
  @@map("domains")
}

model Form {
  id                String      @id @default(cuid())
  name              String
  formType          String
  configuration     Json
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("forms")
}

model SupportTicket {
  id                String      @id @default(cuid())
  subject           String
  description       String      @db.LongText
  status            TicketStatus @default(OPEN)
  priority          TicketPriority @default(MEDIUM)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("support_tickets")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model SubscriptionPlan {
  id                String      @id @default(cuid())
  name              String
  price             Float
  billingCycle      String
  features          Json
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenants           Tenant[]

  @@map("subscription_plans")
}

// Email Campaign Analytics and Tracking
model CampaignAnalytics {
  id                String      @id @default(cuid())
  campaign          Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String      @unique
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("campaign_analytics")
}

model EmailEvent {
  id                String      @id @default(cuid())
  type              EmailEventType
  campaign          Campaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String?
  subscriber        Subscriber? @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String?
  email             String
  ipAddress         String?
  userAgent         String?
  location          Json?
  metadata          Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([campaignId])
  @@index([subscriberId])
  @@index([type])
  @@index([createdAt])
  @@map("email_events")
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
  BLOCKED
}

// Workflow and Automation Models
model WorkflowStep {
  id                String      @id @default(cuid())
  automation        Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId      String
  stepType          String
  stepConfig        Json
  position          Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([automationId])
  @@map("workflow_steps")
}

model AutomationExecution {
  id                String      @id @default(cuid())
  automation        Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId      String
  subscriber        Subscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String
  status            ExecutionStatus @default(PENDING)
  currentStep       Int         @default(0)
  executionData     Json?
  startedAt         DateTime    @default(now())
  completedAt       DateTime?
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([automationId])
  @@index([subscriberId])
  @@index([status])
  @@map("automation_executions")
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
}

// Email Templates
model EmailTemplate {
  id                String      @id @default(cuid())
  name              String
  subject           String
  content           String      @db.LongText
  preheader         String?
  templateType      TemplateType @default(CAMPAIGN)
  isPublic          Boolean     @default(false)
  thumbnailUrl      String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  campaigns         Campaign[]

  @@index([tenantId])
  @@index([templateType])
  @@map("email_templates")
}

enum TemplateType {
  CAMPAIGN
  AUTOMATION
  TRANSACTIONAL
}

// Subscriber Segments
model Segment {
  id                String      @id @default(cuid())
  name              String
  description       String?
  conditions        Json
  subscriberCount   Int         @default(0)
  lastUpdated       DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("segments")
}

// Email Verification
model EmailVerification {
  id                String      @id @default(cuid())
  email             String
  status            VerificationStatus
  verificationData  Json?
  verifiedAt        DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([status])
  @@map("email_verifications")
}

enum VerificationStatus {
  PENDING
  VALID
  INVALID
  RISKY
  UNKNOWN
}

// Bounce and Complaint Handling
model BounceComplaint {
  id                String      @id @default(cuid())
  email             String
  type              BounceComplaintType
  reason            String?
  bounceType        String?
  campaign          Campaign?   @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId        String?
  subscriber        Subscriber? @relation(fields: [subscriberId], references: [id], onDelete: SetNull)
  subscriberId      String?
  rawData           Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([email])
  @@index([type])
  @@index([campaignId])
  @@map("bounce_complaints")
}

enum BounceComplaintType {
  HARD_BOUNCE
  SOFT_BOUNCE
  COMPLAINT
  BLOCK
}

// API Keys and Webhooks
model ApiKey {
  id                String      @id @default(cuid())
  name              String
  keyHash           String      @unique
  permissions       Json
  lastUsedAt        DateTime?
  expiresAt         DateTime?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([keyHash])
  @@map("api_keys")
}

model Webhook {
  id                String      @id @default(cuid())
  name              String
  url               String
  events            Json
  secret            String?
  isActive          Boolean     @default(true)
  lastTriggeredAt   DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("webhooks")
}

// Payment and Billing
model Payment {
  id                String      @id @default(cuid())
  amount            Float
  currency          String      @default("USD")
  status            PaymentStatus
  paymentMethod     String
  paymentProvider   String
  providerPaymentId String?
  metadata          Json?
  paidAt            DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([status])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// Audit Logging
model AuditLog {
  id                String      @id @default(cuid())
  action            String
  resource          String
  resourceId        String?
  userId            String?
  ipAddress         String?
  userAgent         String?
  changes           Json?
  metadata          Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([action])
  @@index([resource])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}
