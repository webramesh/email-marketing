// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Multi-tenant models
model Tenant {
  id                String              @id @default(cuid())
  name              String
  subdomain         String              @unique
  customDomain      String?             @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             User[]
  campaigns         Campaign[]
  subscribers       Subscriber[]
  lists             List[]
  automations       Automation[]
  sendingServers    SendingServer[]
  domains           Domain[]
  forms             Form[]
  supportTickets    SupportTicket[]
  subscriptionPlan  SubscriptionPlan?   @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?
  subscription      TenantSubscription?
  
  // New relationships
  campaignAnalytics CampaignAnalytics[]
  emailEvents       EmailEvent[]
  automationExecutions AutomationExecution[]
  emailTemplates    EmailTemplate[]
  segments          Segment[]
  emailVerifications EmailVerification[]
  bounceComplaints  BounceComplaint[]
  apiKeys           ApiKey[]
  webhooks          Webhook[]
  payments          Payment[]
  auditLogs         AuditLog[]
  scheduledReports  ScheduledReport[]
  plugins           Plugin[]

  @@map("tenants")
}

model User {
  id                String      @id @default(cuid())
  email             String
  name              String?
  password          String
  role              UserRole    @default(USER)
  mfaEnabled        Boolean     @default(false)
  mfaSecret         String?
  mfaBackupCodes    Json?
  mfaLastVerified   DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([email, tenantId])
  @@index([tenantId])
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  SUPPORT
}

// Basic models for email marketing
model Campaign {
  id                String      @id @default(cuid())
  name              String
  subject           String
  preheader         String?
  content           String      @db.LongText
  plainTextContent  String?     @db.LongText
  status            CampaignStatus @default(DRAFT)
  campaignType      CampaignType @default(REGULAR)
  
  // Scheduling
  scheduledAt       DateTime?
  sentAt            DateTime?
  
  // Settings
  fromName          String?
  fromEmail         String?
  replyToEmail      String?
  trackOpens        Boolean     @default(true)
  trackClicks       Boolean     @default(true)
  
  // A/B Testing
  isAbTest          Boolean     @default(false)
  abTestSettings    Json?
  
  // Lists and Segments
  targetLists       Json?       // Array of list IDs
  targetSegments    Json?       // Array of segment IDs
  
  // Template and Design
  templateData      Json?       // Email builder data
  customCss         String?     @db.LongText
  
  // Statistics (cached for performance)
  totalRecipients   Int         @default(0)
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  
  // Metadata
  tags              Json?       // Array of tags for organization
  notes             String?     @db.LongText
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  analytics         CampaignAnalytics?
  emailEvents       EmailEvent[]
  bounceComplaints  BounceComplaint[]
  template          EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId        String?
  
  // A/B Test variants
  abTestVariants    CampaignVariant[]

  @@index([tenantId])
  @@index([templateId])
  @@index([status])
  @@index([campaignType])
  @@index([scheduledAt])
  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum CampaignType {
  REGULAR
  AB_TEST
  AUTOMATION
  TRANSACTIONAL
}

// A/B Test Campaign Variants
model CampaignVariant {
  id                String      @id @default(cuid())
  campaign          Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String
  name              String      // e.g., "Variant A", "Variant B"
  subject           String
  preheader         String?
  content           String      @db.LongText
  templateData      Json?
  percentage        Int         @default(50) // Percentage of audience for this variant
  
  // Statistics for this variant
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  
  // A/B test results
  conversionRate    Float       @default(0)
  isWinner          Boolean     @default(false)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([campaignId])
  @@map("campaign_variants")
}

model Subscriber {
  id                String      @id @default(cuid())
  email             String
  firstName         String?
  lastName          String?
  status            SubscriberStatus @default(ACTIVE)
  customFields      Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  lists             ListSubscriber[]
  
  // New relationships
  emailEvents       EmailEvent[]
  automationExecutions AutomationExecution[]
  bounceComplaints  BounceComplaint[]

  @@unique([email, tenantId])
  @@index([tenantId])
  @@map("subscribers")
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
  INVALID
}

model List {
  id                String      @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  subscribers       ListSubscriber[]

  @@index([tenantId])
  @@map("lists")
}

model ListSubscriber {
  id                String      @id @default(cuid())
  list              List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId            String
  subscriber        Subscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String
  createdAt         DateTime    @default(now())

  @@unique([listId, subscriberId])
  @@index([listId])
  @@index([subscriberId])
  @@map("list_subscribers")
}

model Automation {
  id                String      @id @default(cuid())
  name              String
  status            AutomationStatus @default(DRAFT)
  triggerType       String
  triggerConfig     Json
  workflowData      Json
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // New relationships
  workflowSteps     WorkflowStep[]
  executions        AutomationExecution[]

  @@index([tenantId])
  @@map("automations")
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

model SendingServer {
  id                String      @id @default(cuid())
  name              String
  type              String
  configuration     Json
  isActive          Boolean     @default(true)
  priority          Int         @default(1)
  dailyLimit        Int?
  hourlyLimit       Int?
  dailySent         Int         @default(0)
  hourlySent        Int         @default(0)
  totalSent         Int         @default(0)
  totalFailed       Int         @default(0)
  lastUsedAt        DateTime?
  lastResetAt       DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([isActive])
  @@index([priority])
  @@map("sending_servers")
}

model Domain {
  id                String      @id @default(cuid())
  name              String
  isVerified        Boolean     @default(false)
  dkimSelector      String?
  dkimPrivateKey    String?     @db.LongText
  dkimPublicKey     String?     @db.LongText
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([name, tenantId])
  @@index([tenantId])
  @@map("domains")
}

model Form {
  id                String      @id @default(cuid())
  name              String
  description       String?
  formType          FormType    @default(SUBSCRIPTION)
  status            FormStatus  @default(DRAFT)
  
  // Form configuration
  fields            Json        // Array of form fields configuration
  styling           Json?       // Form styling and theme configuration
  settings          Json?       // Form behavior settings
  
  // Targeting and display
  displayRules      Json?       // When and where to show the form
  targetLists       Json?       // Array of list IDs to add subscribers to
  
  // Analytics
  totalViews        Int         @default(0)
  totalSubmissions  Int         @default(0)
  conversionRate    Float       @default(0)
  
  // Embed configuration
  embedCode         String?     @db.LongText
  embedDomain       String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  submissions       FormSubmission[]
  analytics         FormAnalytics[]

  @@index([tenantId])
  @@index([formType])
  @@index([status])
  @@map("forms")
}

enum FormType {
  SUBSCRIPTION
  POPUP
  EMBEDDED
  LANDING_PAGE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  PAUSED
  ARCHIVED
}

// Form Submissions
model FormSubmission {
  id                String      @id @default(cuid())
  form              Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId            String
  email             String
  firstName         String?
  lastName          String?
  customFields      Json?       // Additional form field data
  ipAddress         String?
  userAgent         String?
  referrer          String?
  location          Json?       // GeoIP data
  subscriberId      String?     // If subscriber was created
  createdAt         DateTime    @default(now())

  @@index([formId])
  @@index([email])
  @@index([createdAt])
  @@map("form_submissions")
}

// Form Analytics
model FormAnalytics {
  id                String      @id @default(cuid())
  form              Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId            String
  date              DateTime    @db.Date
  views             Int         @default(0)
  submissions       Int         @default(0)
  conversionRate    Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([formId, date])
  @@index([formId])
  @@index([date])
  @@map("form_analytics")
}

model SupportTicket {
  id                String      @id @default(cuid())
  subject           String
  description       String      @db.LongText
  status            TicketStatus @default(OPEN)
  priority          TicketPriority @default(MEDIUM)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("support_tickets")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model SubscriptionPlan {
  id                String      @id @default(cuid())
  name              String
  description       String?
  price             Float
  currency          String      @default("USD")
  billingCycle      String      // monthly, yearly, weekly
  features          Json
  quotas            Json        @default("{}") // quota limits
  isActive          Boolean     @default(true)
  trialDays         Int?
  setupFee          Float?
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenants           Tenant[]
  subscriptions     TenantSubscription[]
  fromChanges       SubscriptionChange[] @relation("FromPlan")
  toChanges         SubscriptionChange[] @relation("ToPlan")

  @@map("subscription_plans")
}

// Tenant Subscription Management
model TenantSubscription {
  id                    String              @id @default(cuid())
  tenant                Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId              String              @unique
  plan                  SubscriptionPlan    @relation(fields: [planId], references: [id])
  planId                String
  status                SubscriptionStatus  @default(ACTIVE)
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean             @default(false)
  trialEnd              DateTime?
  customerId            String              // Payment provider customer ID
  subscriptionId        String              // Payment provider subscription ID
  paymentProvider       String
  quotas                Json                // Current quota usage
  usage                 Json                // Current usage metrics
  billingAddress        Json?
  taxRate               Float?
  discountId            String?
  metadata              Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relationships
  invoices              Invoice[]
  billingCycles         BillingCycle[]
  overageBillings       OverageBilling[]
  subscriptionChanges   SubscriptionChange[]

  @@index([tenantId])
  @@index([planId])
  @@index([status])
  @@map("tenant_subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELLED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

// Billing Cycles
model BillingCycle {
  id                String              @id @default(cuid())
  subscription      TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId    String
  cycleStart        DateTime
  cycleEnd          DateTime
  status            BillingCycleStatus  @default(PENDING)
  invoice           Invoice?            @relation(fields: [invoiceId], references: [id])
  invoiceId         String?
  payment           Payment?            @relation(fields: [paymentId], references: [id])
  paymentId         String?
  retryCount        Int                 @default(0)
  nextRetryAt       DateTime?
  failureReason     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([subscriptionId])
  @@index([status])
  @@index([cycleStart])
  @@index([cycleEnd])
  @@map("billing_cycles")
}

enum BillingCycleStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Invoices
model Invoice {
  id                String              @id @default(cuid())
  subscription      TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId    String
  invoiceNumber     String              @unique
  status            InvoiceStatus       @default(OPEN)
  currency          String              @default("USD")
  subtotal          Float
  taxAmount         Float               @default(0)
  discountAmount    Float               @default(0)
  total             Float
  amountPaid        Float               @default(0)
  amountDue         Float
  dueDate           DateTime
  paidAt            DateTime?
  periodStart       DateTime
  periodEnd         DateTime
  lineItems         Json                // Array of line items
  billingAddress    Json?
  paymentProvider   String
  providerInvoiceId String?
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relationships
  billingCycles     BillingCycle[]
  payments          Payment[]
  overageBillings   OverageBilling[]

  @@index([subscriptionId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

// Overage Billing
model OverageBilling {
  id                    String              @id @default(cuid())
  subscription          TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId        String
  resourceType          String              // emails, subscribers, campaigns, etc.
  quotaLimit            Int
  actualUsage           Int
  overageAmount         Int
  unitPrice             Float
  billingPeriodStart    DateTime
  billingPeriodEnd      DateTime
  status                OverageBillingStatus @default(PENDING)
  invoice               Invoice?            @relation(fields: [invoiceId], references: [id])
  invoiceId             String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([subscriptionId])
  @@index([status])
  @@index([resourceType])
  @@map("overage_billings")
}

enum OverageBillingStatus {
  PENDING
  BILLED
  PAID
}

// Subscription Changes (Upgrades/Downgrades)
model SubscriptionChange {
  id                String              @id @default(cuid())
  subscription      TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId    String
  changeType        SubscriptionChangeType
  fromPlan          SubscriptionPlan    @relation("FromPlan", fields: [fromPlanId], references: [id])
  fromPlanId        String
  toPlan            SubscriptionPlan    @relation("ToPlan", fields: [toPlanId], references: [id])
  toPlanId          String
  prorationAmount   Float               @default(0)
  effectiveDate     DateTime
  status            SubscriptionChangeStatus @default(PENDING)
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([subscriptionId])
  @@index([changeType])
  @@index([status])
  @@map("subscription_changes")
}

enum SubscriptionChangeType {
  UPGRADE
  DOWNGRADE
  PLAN_CHANGE
}

enum SubscriptionChangeStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}



// Email Campaign Analytics and Tracking
model CampaignAnalytics {
  id                String      @id @default(cuid())
  campaign          Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String      @unique
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("campaign_analytics")
}

model EmailEvent {
  id                String      @id @default(cuid())
  type              EmailEventType
  campaign          Campaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String?
  subscriber        Subscriber? @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String?
  email             String
  ipAddress         String?
  userAgent         String?
  location          Json?
  metadata          Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([campaignId])
  @@index([subscriberId])
  @@index([type])
  @@index([createdAt])
  @@map("email_events")
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
  BLOCKED
}

// Workflow and Automation Models
model WorkflowStep {
  id                String      @id @default(cuid())
  automation        Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId      String
  stepType          String
  stepConfig        Json
  position          Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([automationId])
  @@map("workflow_steps")
}

model AutomationExecution {
  id                String      @id @default(cuid())
  automation        Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId      String
  subscriber        Subscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String
  status            ExecutionStatus @default(PENDING)
  currentStep       Int         @default(0)
  executionData     Json?
  startedAt         DateTime    @default(now())
  completedAt       DateTime?
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([automationId])
  @@index([subscriberId])
  @@index([status])
  @@map("automation_executions")
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
}

// Email Templates
model EmailTemplate {
  id                String      @id @default(cuid())
  name              String
  subject           String
  content           String      @db.LongText
  preheader         String?
  templateType      TemplateType @default(CAMPAIGN)
  isPublic          Boolean     @default(false)
  thumbnailUrl      String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  campaigns         Campaign[]

  @@index([tenantId])
  @@index([templateType])
  @@map("email_templates")
}

enum TemplateType {
  CAMPAIGN
  AUTOMATION
  TRANSACTIONAL
}

// Subscriber Segments
model Segment {
  id                String      @id @default(cuid())
  name              String
  description       String?
  conditions        Json
  subscriberCount   Int         @default(0)
  lastUpdated       DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("segments")
}

// Email Verification
model EmailVerification {
  id                String      @id @default(cuid())
  email             String
  status            VerificationStatus
  verificationData  Json?
  verifiedAt        DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([status])
  @@map("email_verifications")
}

enum VerificationStatus {
  PENDING
  VALID
  INVALID
  RISKY
  UNKNOWN
}

// Bounce and Complaint Handling
model BounceComplaint {
  id                String      @id @default(cuid())
  email             String
  type              BounceComplaintType
  reason            String?
  bounceType        String?
  campaign          Campaign?   @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId        String?
  subscriber        Subscriber? @relation(fields: [subscriberId], references: [id], onDelete: SetNull)
  subscriberId      String?
  rawData           Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([email])
  @@index([type])
  @@index([campaignId])
  @@map("bounce_complaints")
}

enum BounceComplaintType {
  HARD_BOUNCE
  SOFT_BOUNCE
  COMPLAINT
  BLOCK
}

// API Keys and Webhooks
model ApiKey {
  id                String      @id @default(cuid())
  name              String
  keyHash           String      @unique
  permissions       Json
  lastUsedAt        DateTime?
  expiresAt         DateTime?
  isActive          Boolean     @default(true)
  userId            String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  usage             ApiKeyUsage[]

  @@index([tenantId])
  @@index([keyHash])
  @@map("api_keys")
}

model ApiKeyUsage {
  id                String      @id @default(cuid())
  apiKey            ApiKey      @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  apiKeyId          String
  endpoint          String
  method            String
  statusCode        Int
  responseTime      Int
  timestamp         DateTime    @default(now())

  @@index([apiKeyId])
  @@index([timestamp])
  @@index([endpoint])
  @@map("api_key_usage")
}

model Webhook {
  id                String      @id @default(cuid())
  name              String
  url               String
  events            Json
  secret            String?
  isActive          Boolean     @default(true)
  lastTriggeredAt   DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("webhooks")
}

// Payment and Billing
model Payment {
  id                String      @id @default(cuid())
  amount            Float
  currency          String      @default("USD")
  status            PaymentStatus
  paymentMethod     String
  paymentProvider   String
  providerPaymentId String?
  metadata          Json?
  paidAt            DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  billingCycles     BillingCycle[]
  invoices          Invoice[]

  @@index([tenantId])
  @@index([status])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// Audit Logging
model AuditLog {
  id                String      @id @default(cuid())
  action            String
  resource          String
  resourceId        String?
  userId            String?
  ipAddress         String?
  userAgent         String?
  changes           Json?
  metadata          Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([action])
  @@index([resource])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Scheduled Reports
model ScheduledReport {
  id                String      @id @default(cuid())
  name              String
  description       String?
  reportConfig      Json
  schedule          Json
  isActive          Boolean     @default(true)
  lastRunAt         DateTime?
  nextRunAt         DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([isActive])
  @@index([nextRunAt])
  @@map("scheduled_reports")
}

// Plugin System
model Plugin {
  id                String      @id @default(cuid())
  pluginId          String      // Plugin identifier from manifest
  name              String
  version           String
  description       String
  author            String
  category          PluginCategory
  status            PluginStatus @default(ACTIVE)
  config            Json        // Plugin configuration and settings
  hooks             Json        // Array of plugin hooks
  permissions       Json        // Array of required permissions
  dependencies      Json        // Array of plugin dependencies
  metadata          Json?       // Additional plugin metadata
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([pluginId, tenantId])
  @@index([tenantId])
  @@index([category])
  @@index([status])
  @@map("plugins")
}

enum PluginCategory {
  AI
  ANALYTICS
  AUTOMATION
  INTEGRATION
  EMAIL_PROVIDER
  PAYMENT
  STORAGE
  UTILITY
}

enum PluginStatus {
  ACTIVE
  INACTIVE
  ERROR
  UPDATING
}
