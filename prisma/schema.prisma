// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Multi-tenant models
model Tenant {
  id                String              @id @default(cuid())
  name              String
  subdomain         String              @unique
  customDomain      String?             @unique
  
  // Verification fields
  isVerified        Boolean             @default(false)
  verifiedAt        DateTime?
  verificationNotes String?             @db.LongText
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             User[]
  campaigns         Campaign[]
  subscribers       Subscriber[]
  lists             List[]
  automations       Automation[]
  sendingServers    SendingServer[]
  domains           Domain[]
  forms             Form[]
  supportTickets    SupportTicket[]
  subscriptionPlan  SubscriptionPlan?   @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?
  subscription      TenantSubscription?
  
  // New relationships
  campaignAnalytics CampaignAnalytics[]
  emailEvents       EmailEvent[]
  automationExecutions AutomationExecution[]
  emailTemplates    EmailTemplate[]
  segments          Segment[]
  emailVerifications EmailVerification[]
  bounceComplaints  BounceComplaint[]
  apiKeys           ApiKey[]
  webhooks          Webhook[]
  payments          Payment[]
  auditLogs         AuditLog[]
  scheduledReports  ScheduledReport[]
  plugins           Plugin[]
  
  // Package management relationships
  createdPackages   Package[]       @relation("PackageCreator")
  purchasedPackages PackagePurchase[]
  packageSales      PackageSale[]
  packageReviews    PackageReview[]
  
  // Onboarding relationships
  userInvitations   UserInvitation[]
  adminVerifications AdminCompanyVerification[]
  userOnboardings   UserOnboarding[]

  @@map("tenants")
}

model User {
  id                String      @id @default(cuid())
  email             String
  name              String?
  password          String
  role              UserRole    @default(USER)
  mfaEnabled        Boolean     @default(false)
  mfaSecret         String?
  mfaBackupCodes    Json?
  mfaLastVerified   DateTime?
  
  // Password security fields
  passwordChangedAt DateTime?   // When password was last changed
  passwordExpiresAt DateTime?   // When password expires (if policy requires)
  mustChangePassword Boolean    @default(false) // Force password change on next login
  failedLoginAttempts Int       @default(0) // Track failed login attempts
  lockedUntil       DateTime?   // Account lockout timestamp
  isCompromised     Boolean     @default(false) // Flag for compromised passwords
  compromisedAt     DateTime?   // When password was marked as compromised
  
  // Profile fields
  firstName         String?
  lastName          String?
  profilePicture    String?     // URL to profile picture
  bio               String?     @db.LongText
  phoneNumber       String?
  timezone          String?     @default("UTC")
  language          String?     @default("en")
  dateFormat        String?     @default("MM/dd/yyyy")
  timeFormat        String?     @default("12h")
  
  // Account status
  isActive          Boolean     @default(true)
  emailVerified     Boolean     @default(false)
  emailVerifiedAt   DateTime?
  deactivatedAt     DateTime?
  deactivationReason String?
  reactivatedAt     DateTime?
  
  // Notification preferences
  emailNotifications Json?      @default("{\"campaigns\": true, \"system\": true, \"security\": true}")
  pushNotifications Boolean     @default(true)
  smsNotifications  Boolean     @default(false)
  
  // Session management fields
  lastLoginAt       DateTime?
  lastActivityAt    DateTime?
  sessionTimeout    Int         @default(86400) // 24 hours in seconds
  maxConcurrentSessions Int     @default(5)
  rememberMeEnabled Boolean     @default(false)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Support ticket relationships
  assignedTickets   SupportTicket[] @relation("AssignedTickets")
  requestedTickets  SupportTicket[] @relation("RequestedTickets")
  
  // Session relationships
  userSessions      UserSession[]
  sessionActivities SessionActivity[]
  rememberTokens    RememberToken[]
  
  // Profile relationships
  profileHistory    UserProfileHistory[]
  passwordHistory   PasswordHistory[]
  passwordResetTokens PasswordResetToken[]
  
  // OAuth relationships
  accounts          Account[]
  
  // Onboarding relationships
  onboardings       UserOnboarding[]

  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([isActive])
  @@index([passwordExpiresAt])
  @@index([mustChangePassword])
  @@index([failedLoginAttempts])
  @@index([lockedUntil])
  @@index([isCompromised])
  @@map("users")
}

// OAuth Account model for social authentication
model Account {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String      // oauth, email, credentials
  provider          String      // google, github, microsoft-entra-id
  providerAccountId String      // The account ID from the provider
  refresh_token     String?     @db.LongText
  access_token      String?     @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.LongText
  session_state     String?
  
  // Additional OAuth data
  email             String?     // Email from OAuth provider
  name              String?     // Name from OAuth provider
  image             String?     // Profile image from OAuth provider
  
  // Linking metadata
  linkedAt          DateTime    @default(now())
  lastUsedAt        DateTime?
  isActive          Boolean     @default(true)
  
  // Security and audit
  ipAddress         String?
  userAgent         String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([isActive])
  @@map("accounts")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
  SUPPORT
}

// Password History for preventing password reuse
model PasswordHistory {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  passwordHash      String      // Hashed password
  createdAt         DateTime    @default(now())
  ipAddress         String?
  userAgent         String?

  @@index([userId])
  @@index([createdAt])
  @@map("password_history")
}

// Password Reset Tokens
model PasswordResetToken {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  token             String      @unique
  tokenHash         String      @unique // Hashed version of token for security
  expiresAt         DateTime
  isUsed            Boolean     @default(false)
  usedAt            DateTime?
  verificationMethod PasswordResetMethod
  verificationData  Json?       // Store verification data (email, phone, etc.)
  ipAddress         String?
  userAgent         String?
  metadata          Json?       // Additional context
  createdAt         DateTime    @default(now())

  @@index([userId])
  @@index([token])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isUsed])
  @@index([verificationMethod])
  @@map("password_reset_tokens")
}

enum PasswordResetMethod {
  EMAIL
  SMS
  SECURITY_QUESTIONS
  BACKUP_EMAIL
  ADMIN_RESET
}

// Enhanced Session Management Models
model UserSession {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  sessionToken      String      @unique
  deviceId          String?
  deviceName        String?
  deviceType        String?     // mobile, desktop, tablet
  browser           String?
  browserVersion    String?
  os                String?
  osVersion         String?
  ipAddress         String
  location          Json?       // GeoIP data
  userAgent         String?
  isActive          Boolean     @default(true)
  lastActivityAt    DateTime    @default(now())
  expiresAt         DateTime
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Session activities
  activities        SessionActivity[]

  @@index([userId])
  @@index([sessionToken])
  @@index([isActive])
  @@index([expiresAt])
  @@index([lastActivityAt])
  @@map("user_sessions")
}

model SessionActivity {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  session           UserSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  sessionId         String?
  action            String      // login, logout, page_view, api_call, etc.
  resource          String?     // resource accessed
  ipAddress         String
  userAgent         String?
  location          Json?       // GeoIP data
  metadata          Json?       // additional context
  riskScore         Float?      // calculated risk score
  isBlocked         Boolean     @default(false)
  blockReason       String?
  createdAt         DateTime    @default(now())

  @@index([userId])
  @@index([sessionId])
  @@index([action])
  @@index([createdAt])
  @@index([riskScore])
  @@index([isBlocked])
  @@map("session_activities")
}

model RememberToken {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  tokenHash         String      @unique
  deviceId          String?
  deviceFingerprint String?
  ipAddress         String
  userAgent         String?
  isActive          Boolean     @default(true)
  lastUsedAt        DateTime    @default(now())
  expiresAt         DateTime
  createdAt         DateTime    @default(now())

  @@index([userId])
  @@index([tokenHash])
  @@index([isActive])
  @@index([expiresAt])
  @@map("remember_tokens")
}

// User Profile History for tracking changes
model UserProfileHistory {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  changeType        ProfileChangeType
  fieldName         String      // Field that was changed
  oldValue          String?     @db.LongText
  newValue          String?     @db.LongText
  changedBy         String?     // User ID who made the change (for admin changes)
  ipAddress         String?
  userAgent         String?
  metadata          Json?       // Additional context
  createdAt         DateTime    @default(now())

  @@index([userId])
  @@index([changeType])
  @@index([createdAt])
  @@map("user_profile_history")
}

enum ProfileChangeType {
  PROFILE_UPDATE
  PASSWORD_CHANGE
  EMAIL_CHANGE
  PREFERENCES_UPDATE
  ACCOUNT_DEACTIVATION
  ACCOUNT_REACTIVATION
  PROFILE_PICTURE_UPLOAD
  PROFILE_PICTURE_REMOVE
}

model SecurityEvent {
  id                String      @id @default(cuid())
  userId            String?
  tenantId          String?
  eventType         SecurityEventType
  severity          SecuritySeverity @default(LOW)
  description       String
  ipAddress         String?
  userAgent         String?
  location          Json?
  metadata          Json?
  isResolved        Boolean     @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  createdAt         DateTime    @default(now())

  @@index([userId])
  @@index([tenantId])
  @@index([eventType])
  @@index([severity])
  @@index([createdAt])
  @@index([isResolved])
  @@map("security_events")
}

enum SecurityEventType {
  FAILED_LOGIN
  SUSPICIOUS_LOGIN
  MULTIPLE_FAILED_ATTEMPTS
  UNUSUAL_LOCATION
  CONCURRENT_SESSION_LIMIT
  SESSION_HIJACK_ATTEMPT
  BRUTE_FORCE_ATTEMPT
  ACCOUNT_LOCKOUT
  PASSWORD_RESET_REQUEST
  MFA_BYPASS_ATTEMPT
  PRIVILEGE_ESCALATION
  UNAUTHORIZED_ACCESS
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Basic models for email marketing
model Campaign {
  id                String      @id @default(cuid())
  name              String
  subject           String
  preheader         String?
  content           String      @db.LongText
  plainTextContent  String?     @db.LongText
  status            CampaignStatus @default(DRAFT)
  campaignType      CampaignType @default(REGULAR)
  
  // Scheduling
  scheduledAt       DateTime?
  sentAt            DateTime?
  
  // Settings
  fromName          String?
  fromEmail         String?
  replyToEmail      String?
  trackOpens        Boolean     @default(true)
  trackClicks       Boolean     @default(true)
  
  // A/B Testing
  isAbTest          Boolean     @default(false)
  abTestSettings    Json?
  
  // Lists and Segments
  targetLists       Json?       // Array of list IDs
  targetSegments    Json?       // Array of segment IDs
  
  // Template and Design
  templateData      Json?       // Email builder data
  customCss         String?     @db.LongText
  
  // Statistics (cached for performance)
  totalRecipients   Int         @default(0)
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  
  // Metadata
  tags              Json?       // Array of tags for organization
  notes             String?     @db.LongText
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  analytics         CampaignAnalytics?
  emailEvents       EmailEvent[]
  bounceComplaints  BounceComplaint[]
  template          EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId        String?
  
  // A/B Test variants
  abTestVariants    CampaignVariant[]

  @@index([tenantId])
  @@index([templateId])
  @@index([status])
  @@index([campaignType])
  @@index([scheduledAt])
  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum CampaignType {
  REGULAR
  AB_TEST
  AUTOMATION
  TRANSACTIONAL
}

// A/B Test Campaign Variants
model CampaignVariant {
  id                String      @id @default(cuid())
  campaign          Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String
  name              String      // e.g., "Variant A", "Variant B"
  subject           String
  preheader         String?
  content           String      @db.LongText
  templateData      Json?
  percentage        Int         @default(50) // Percentage of audience for this variant
  
  // Statistics for this variant
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  
  // A/B test results
  conversionRate    Float       @default(0)
  isWinner          Boolean     @default(false)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([campaignId])
  @@map("campaign_variants")
}

model Subscriber {
  id                String      @id @default(cuid())
  email             String
  firstName         String?
  lastName          String?
  status            SubscriberStatus @default(ACTIVE)
  customFields      Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  lists             ListSubscriber[]
  
  // New relationships
  emailEvents       EmailEvent[]
  automationExecutions AutomationExecution[]
  bounceComplaints  BounceComplaint[]

  @@unique([email, tenantId])
  @@index([tenantId])
  @@map("subscribers")
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
  INVALID
}

model List {
  id                String      @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  subscribers       ListSubscriber[]

  @@index([tenantId])
  @@map("lists")
}

model ListSubscriber {
  id                String      @id @default(cuid())
  list              List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId            String
  subscriber        Subscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String
  createdAt         DateTime    @default(now())

  @@unique([listId, subscriberId])
  @@index([listId])
  @@index([subscriberId])
  @@map("list_subscribers")
}

model Automation {
  id                String      @id @default(cuid())
  name              String
  status            AutomationStatus @default(DRAFT)
  triggerType       String
  triggerConfig     Json
  workflowData      Json
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // New relationships
  workflowSteps     WorkflowStep[]
  executions        AutomationExecution[]

  @@index([tenantId])
  @@map("automations")
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

model SendingServer {
  id                String      @id @default(cuid())
  name              String
  type              String
  configuration     Json
  isActive          Boolean     @default(true)
  priority          Int         @default(1)
  dailyLimit        Int?
  hourlyLimit       Int?
  dailySent         Int         @default(0)
  hourlySent        Int         @default(0)
  totalSent         Int         @default(0)
  totalFailed       Int         @default(0)
  lastUsedAt        DateTime?
  lastResetAt       DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([isActive])
  @@index([priority])
  @@map("sending_servers")
}

model Domain {
  id                String      @id @default(cuid())
  name              String
  isVerified        Boolean     @default(false)
  dkimSelector      String?
  dkimPrivateKey    String?     @db.LongText
  dkimPublicKey     String?     @db.LongText
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([name, tenantId])
  @@index([tenantId])
  @@map("domains")
}

model Form {
  id                String      @id @default(cuid())
  name              String
  description       String?
  formType          FormType    @default(SUBSCRIPTION)
  status            FormStatus  @default(DRAFT)
  
  // Form configuration
  fields            Json        // Array of form fields configuration
  styling           Json?       // Form styling and theme configuration
  settings          Json?       // Form behavior settings
  
  // Targeting and display
  displayRules      Json?       // When and where to show the form
  targetLists       Json?       // Array of list IDs to add subscribers to
  
  // Analytics
  totalViews        Int         @default(0)
  totalSubmissions  Int         @default(0)
  conversionRate    Float       @default(0)
  
  // Embed configuration
  embedCode         String?     @db.LongText
  embedDomain       String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  submissions       FormSubmission[]
  analytics         FormAnalytics[]

  @@index([tenantId])
  @@index([formType])
  @@index([status])
  @@map("forms")
}

enum FormType {
  SUBSCRIPTION
  POPUP
  EMBEDDED
  LANDING_PAGE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  PAUSED
  ARCHIVED
}

// Form Submissions
model FormSubmission {
  id                String      @id @default(cuid())
  form              Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId            String
  email             String
  firstName         String?
  lastName          String?
  customFields      Json?       // Additional form field data
  ipAddress         String?
  userAgent         String?
  referrer          String?
  location          Json?       // GeoIP data
  subscriberId      String?     // If subscriber was created
  createdAt         DateTime    @default(now())

  @@index([formId])
  @@index([email])
  @@index([createdAt])
  @@map("form_submissions")
}

// Form Analytics
model FormAnalytics {
  id                String      @id @default(cuid())
  form              Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId            String
  date              DateTime    @db.Date
  views             Int         @default(0)
  submissions       Int         @default(0)
  conversionRate    Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([formId, date])
  @@index([formId])
  @@index([date])
  @@map("form_analytics")
}

model SupportTicket {
  id                String      @id @default(cuid())
  ticketNumber      String      @unique
  subject           String
  description       String      @db.LongText
  status            TicketStatus @default(OPEN)
  priority          TicketPriority @default(MEDIUM)
  category          TicketCategory @default(GENERAL)
  language          String      @default("en")
  
  // Assignment and routing
  assignedToUserId  String?
  assignedToUser    User?       @relation("AssignedTickets", fields: [assignedToUserId], references: [id], onDelete: SetNull)
  assignedCompany   String?     // Company assignment for routing
  
  // Requester information
  requesterEmail    String
  requesterName     String?
  requesterUserId   String?
  requesterUser     User?       @relation("RequestedTickets", fields: [requesterUserId], references: [id], onDelete: SetNull)
  
  // SLA and escalation
  slaLevel          SlaLevel    @default(STANDARD)
  dueDate           DateTime?
  firstResponseAt   DateTime?
  resolvedAt        DateTime?
  closedAt          DateTime?
  escalatedAt       DateTime?
  escalationLevel   Int         @default(0)
  
  // Metadata
  tags              Json?       // Array of tags
  customFields      Json?       // Additional custom fields
  source            TicketSource @default(WEB)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  comments          TicketComment[]
  attachments       TicketAttachment[]
  escalations       TicketEscalation[]
  slaEvents         TicketSlaEvent[]

  @@index([tenantId])
  @@index([status])
  @@index([priority])
  @@index([assignedToUserId])
  @@index([assignedCompany])
  @@index([dueDate])
  @@index([ticketNumber])
  @@map("support_tickets")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  GENERAL
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG_REPORT
  ACCOUNT
  INTEGRATION
}

enum SlaLevel {
  BASIC
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum TicketSource {
  WEB
  EMAIL
  API
  PHONE
  CHAT
}

model SubscriptionPlan {
  id                String      @id @default(cuid())
  name              String
  description       String?
  price             Float
  currency          String      @default("USD")
  billingCycle      String      // monthly, yearly, weekly
  features          Json
  quotas            Json        @default("{}") // quota limits
  isActive          Boolean     @default(true)
  trialDays         Int?
  setupFee          Float?
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenants           Tenant[]
  subscriptions     TenantSubscription[]
  fromChanges       SubscriptionChange[] @relation("FromPlan")
  toChanges         SubscriptionChange[] @relation("ToPlan")

  @@map("subscription_plans")
}

// Tenant Subscription Management
model TenantSubscription {
  id                    String              @id @default(cuid())
  tenant                Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId              String              @unique
  plan                  SubscriptionPlan    @relation(fields: [planId], references: [id])
  planId                String
  status                SubscriptionStatus  @default(ACTIVE)
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean             @default(false)
  trialEnd              DateTime?
  customerId            String              // Payment provider customer ID
  subscriptionId        String              // Payment provider subscription ID
  paymentProvider       String
  quotas                Json                // Current quota usage
  usage                 Json                // Current usage metrics
  billingAddress        Json?
  taxRate               Float?
  discountId            String?
  metadata              Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relationships
  invoices              Invoice[]
  billingCycles         BillingCycle[]
  overageBillings       OverageBilling[]
  subscriptionChanges   SubscriptionChange[]

  @@index([tenantId])
  @@index([planId])
  @@index([status])
  @@map("tenant_subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELLED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

// Billing Cycles
model BillingCycle {
  id                String              @id @default(cuid())
  subscription      TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId    String
  cycleStart        DateTime
  cycleEnd          DateTime
  status            BillingCycleStatus  @default(PENDING)
  invoice           Invoice?            @relation(fields: [invoiceId], references: [id])
  invoiceId         String?
  payment           Payment?            @relation(fields: [paymentId], references: [id])
  paymentId         String?
  retryCount        Int                 @default(0)
  nextRetryAt       DateTime?
  failureReason     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([subscriptionId])
  @@index([status])
  @@index([cycleStart])
  @@index([cycleEnd])
  @@map("billing_cycles")
}

enum BillingCycleStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Invoices
model Invoice {
  id                String              @id @default(cuid())
  subscription      TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId    String
  invoiceNumber     String              @unique
  status            InvoiceStatus       @default(OPEN)
  currency          String              @default("USD")
  subtotal          Float
  taxAmount         Float               @default(0)
  discountAmount    Float               @default(0)
  total             Float
  amountPaid        Float               @default(0)
  amountDue         Float
  dueDate           DateTime
  paidAt            DateTime?
  periodStart       DateTime
  periodEnd         DateTime
  lineItems         Json                // Array of line items
  billingAddress    Json?
  paymentProvider   String
  providerInvoiceId String?
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relationships
  billingCycles     BillingCycle[]
  payments          Payment[]
  overageBillings   OverageBilling[]

  @@index([subscriptionId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

// Overage Billing
model OverageBilling {
  id                    String              @id @default(cuid())
  subscription          TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId        String
  resourceType          String              // emails, subscribers, campaigns, etc.
  quotaLimit            Int
  actualUsage           Int
  overageAmount         Int
  unitPrice             Float
  billingPeriodStart    DateTime
  billingPeriodEnd      DateTime
  status                OverageBillingStatus @default(PENDING)
  invoice               Invoice?            @relation(fields: [invoiceId], references: [id])
  invoiceId             String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([subscriptionId])
  @@index([status])
  @@index([resourceType])
  @@map("overage_billings")
}

enum OverageBillingStatus {
  PENDING
  BILLED
  PAID
}

// Subscription Changes (Upgrades/Downgrades)
model SubscriptionChange {
  id                String              @id @default(cuid())
  subscription      TenantSubscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId    String
  changeType        SubscriptionChangeType
  fromPlan          SubscriptionPlan    @relation("FromPlan", fields: [fromPlanId], references: [id])
  fromPlanId        String
  toPlan            SubscriptionPlan    @relation("ToPlan", fields: [toPlanId], references: [id])
  toPlanId          String
  prorationAmount   Float               @default(0)
  effectiveDate     DateTime
  status            SubscriptionChangeStatus @default(PENDING)
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([subscriptionId])
  @@index([changeType])
  @@index([status])
  @@map("subscription_changes")
}

enum SubscriptionChangeType {
  UPGRADE
  DOWNGRADE
  PLAN_CHANGE
}

enum SubscriptionChangeStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}



// Email Campaign Analytics and Tracking
model CampaignAnalytics {
  id                String      @id @default(cuid())
  campaign          Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String      @unique
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalBounced      Int         @default(0)
  totalComplained   Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("campaign_analytics")
}

model EmailEvent {
  id                String      @id @default(cuid())
  type              EmailEventType
  campaign          Campaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        String?
  subscriber        Subscriber? @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String?
  email             String
  ipAddress         String?
  userAgent         String?
  location          Json?
  metadata          Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([campaignId])
  @@index([subscriberId])
  @@index([type])
  @@index([createdAt])
  @@map("email_events")
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
  BLOCKED
}

// Workflow and Automation Models
model WorkflowStep {
  id                String      @id @default(cuid())
  automation        Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId      String
  stepType          String
  stepConfig        Json
  position          Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([automationId])
  @@map("workflow_steps")
}

model AutomationExecution {
  id                String      @id @default(cuid())
  automation        Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId      String
  subscriber        Subscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId      String
  status            ExecutionStatus @default(PENDING)
  currentStep       Int         @default(0)
  executionData     Json?
  startedAt         DateTime    @default(now())
  completedAt       DateTime?
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([automationId])
  @@index([subscriberId])
  @@index([status])
  @@map("automation_executions")
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
}

// Email Templates
model EmailTemplate {
  id                String      @id @default(cuid())
  name              String
  subject           String
  content           String      @db.LongText
  preheader         String?
  templateType      TemplateType @default(CAMPAIGN)
  isPublic          Boolean     @default(false)
  thumbnailUrl      String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  campaigns         Campaign[]

  @@index([tenantId])
  @@index([templateType])
  @@map("email_templates")
}

enum TemplateType {
  CAMPAIGN
  AUTOMATION
  TRANSACTIONAL
}

// Subscriber Segments
model Segment {
  id                String      @id @default(cuid())
  name              String
  description       String?
  conditions        Json
  subscriberCount   Int         @default(0)
  lastUpdated       DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("segments")
}

// Email Verification
model EmailVerification {
  id                String      @id @default(cuid())
  email             String
  status            EmailVerificationStatus @default(PENDING)
  verificationData  Json?
  verifiedAt        DateTime?
  
  // Onboarding-specific fields
  tokenHash         String?     @unique
  expiresAt         DateTime?
  userId            String?
  verificationType  String?     // REGISTRATION, EMAIL_CHANGE, INVITATION
  metadata          Json?       @default("{}")
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([status])
  @@index([tokenHash])
  @@index([verificationType])
  @@map("email_verifications")
}

enum VerificationStatus {
  PENDING
  VALID
  INVALID
  RISKY
  UNKNOWN
}

// Bounce and Complaint Handling
model BounceComplaint {
  id                String      @id @default(cuid())
  email             String
  type              BounceComplaintType
  reason            String?
  bounceType        String?
  campaign          Campaign?   @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId        String?
  subscriber        Subscriber? @relation(fields: [subscriberId], references: [id], onDelete: SetNull)
  subscriberId      String?
  rawData           Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([email])
  @@index([type])
  @@index([campaignId])
  @@map("bounce_complaints")
}

enum BounceComplaintType {
  HARD_BOUNCE
  SOFT_BOUNCE
  COMPLAINT
  BLOCK
}

// User Onboarding Models

// Enhanced Email Verification for onboarding
enum EmailVerificationStatus {
  PENDING
  VERIFIED
  EXPIRED
  FAILED
}

// User Invitations
model UserInvitation {
  id                String      @id @default(cuid())
  email             String
  role              UserRole
  tenantId          String
  invitedBy         String
  packageId         String?
  customMessage     String?     @db.LongText
  tokenHash         String      @unique
  expiresAt         DateTime
  status            UserInvitationStatus @default(PENDING)
  acceptedAt        DateTime?
  acceptedBy        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([email])
  @@index([status])
  @@index([tokenHash])
  @@map("user_invitations")
}

enum UserInvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// User Onboarding Flows
model UserOnboarding {
  id                String      @id @default(cuid())
  userId            String
  tenantId          String
  flowType          String      // ADMIN_SETUP, CUSTOMER_PACKAGE, USER_REGISTRATION
  currentStep       Int         @default(1)
  totalSteps        Int
  stepData          Json        @default("{}")
  isCompleted       Boolean     @default(false)
  completedAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tenantId])
  @@index([flowType])
  @@index([isCompleted])
  @@map("user_onboarding")
}

// Admin Company Verification
model AdminCompanyVerification {
  id                String      @id @default(cuid())
  tenantId          String
  companyName       String
  businessType      String
  contactEmail      String
  contactPhone      String?
  businessAddress   Json
  businessDocuments Json        @default("[]")
  verificationNotes String?     @db.LongText
  status            AdminVerificationStatus @default(PENDING)
  submittedAt       DateTime    @default(now())
  reviewedBy        String?
  reviewedAt        DateTime?
  reviewNotes       String?     @db.LongText
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([status])
  @@index([reviewedBy])
  @@map("admin_company_verifications")
}

enum AdminVerificationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

// API Keys and Webhooks
model ApiKey {
  id                String      @id @default(cuid())
  name              String
  keyHash           String      @unique
  permissions       Json
  lastUsedAt        DateTime?
  expiresAt         DateTime?
  isActive          Boolean     @default(true)
  userId            String?
  
  // Rate limiting fields
  rateLimit         Int?        // Requests per minute
  rateLimitWindow   Int?        // Window in seconds
  
  // Scoping fields
  allowedIps        Json?       // Array of allowed IP addresses/ranges
  allowedDomains    Json?       // Array of allowed domains
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  usage             ApiKeyUsage[]
  refreshTokens     RefreshToken[]

  @@index([tenantId])
  @@index([keyHash])
  @@index([isActive])
  @@index([expiresAt])
  @@map("api_keys")
}

model ApiKeyUsage {
  id                String      @id @default(cuid())
  apiKey            ApiKey      @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  apiKeyId          String
  endpoint          String
  method            String
  statusCode        Int
  responseTime      Int
  ipAddress         String?
  userAgent         String?
  requestSize       Int?        // Request body size in bytes
  responseSize      Int?        // Response body size in bytes
  timestamp         DateTime    @default(now())

  @@index([apiKeyId])
  @@index([timestamp])
  @@index([endpoint])
  @@index([statusCode])
  @@map("api_key_usage")
}

// JWT Refresh Tokens for API authentication
model RefreshToken {
  id                String      @id @default(cuid())
  tokenHash         String      @unique
  apiKey            ApiKey      @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  apiKeyId          String
  expiresAt         DateTime
  isRevoked         Boolean     @default(false)
  revokedAt         DateTime?
  revokedReason     String?
  
  // Security tracking
  ipAddress         String?
  userAgent         String?
  deviceFingerprint String?
  
  // Usage tracking
  lastUsedAt        DateTime?
  usageCount        Int         @default(0)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([apiKeyId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isRevoked])
  @@map("refresh_tokens")
}

model Webhook {
  id                String      @id @default(cuid())
  name              String
  url               String
  events            Json
  secret            String?
  isActive          Boolean     @default(true)
  lastTriggeredAt   DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@map("webhooks")
}

// Payment and Billing
model Payment {
  id                String      @id @default(cuid())
  amount            Float
  currency          String      @default("USD")
  status            PaymentStatus
  paymentMethod     String
  paymentProvider   String
  providerPaymentId String?
  metadata          Json?
  paidAt            DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String
  
  // Relationships
  billingCycles     BillingCycle[]
  invoices          Invoice[]

  @@index([tenantId])
  @@index([status])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// Audit Logging
model AuditLog {
  id                String      @id @default(cuid())
  action            String
  resource          String
  resourceId        String?
  userId            String?
  ipAddress         String?
  userAgent         String?
  changes           Json?
  metadata          Json?
  createdAt         DateTime    @default(now())
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([action])
  @@index([resource])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Scheduled Reports
model ScheduledReport {
  id                String      @id @default(cuid())
  name              String
  description       String?
  reportConfig      Json
  schedule          Json
  isActive          Boolean     @default(true)
  lastRunAt         DateTime?
  nextRunAt         DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@index([tenantId])
  @@index([isActive])
  @@index([nextRunAt])
  @@map("scheduled_reports")
}

// Plugin System
model Plugin {
  id                String      @id @default(cuid())
  pluginId          String      // Plugin identifier from manifest
  name              String
  version           String
  description       String
  author            String
  category          PluginCategory
  status            PluginStatus @default(ACTIVE)
  config            Json        // Plugin configuration and settings
  hooks             Json        // Array of plugin hooks
  permissions       Json        // Array of required permissions
  dependencies      Json        // Array of plugin dependencies
  metadata          Json?       // Additional plugin metadata
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String

  @@unique([pluginId, tenantId])
  @@index([tenantId])
  @@index([category])
  @@index([status])
  @@map("plugins")
}

enum PluginCategory {
  AI
  ANALYTICS
  AUTOMATION
  INTEGRATION
  EMAIL_PROVIDER
  PAYMENT
  STORAGE
  UTILITY
}

enum PluginStatus {
  ACTIVE
  INACTIVE
  ERROR
  UPDATING
}
// Support Ticket Comments
model TicketComment {
  id                String      @id @default(cuid())
  ticket            SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId          String
  content           String      @db.LongText
  isInternal        Boolean     @default(false)
  authorId          String?
  authorName        String?
  authorEmail       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([ticketId])
  @@index([createdAt])
  @@map("ticket_comments")
}

// Support Ticket Attachments
model TicketAttachment {
  id                String      @id @default(cuid())
  ticket            SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId          String
  fileName          String
  originalName      String
  fileSize          Int
  mimeType          String
  filePath          String
  uploadedBy        String?
  createdAt         DateTime    @default(now())

  @@index([ticketId])
  @@map("ticket_attachments")
}

// Support Ticket Escalations
model TicketEscalation {
  id                String      @id @default(cuid())
  ticket            SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId          String
  fromLevel         Int
  toLevel           Int
  reason            String
  escalatedBy       String?
  escalatedAt       DateTime    @default(now())
  resolvedAt        DateTime?

  @@index([ticketId])
  @@index([escalatedAt])
  @@map("ticket_escalations")
}

// Support Ticket SLA Events
model TicketSlaEvent {
  id                String      @id @default(cuid())
  ticket            SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId          String
  eventType         SlaEventType
  targetTime        DateTime
  actualTime        DateTime?
  isBreached        Boolean     @default(false)
  breachDuration    Int?        // Minutes
  createdAt         DateTime    @default(now())

  @@index([ticketId])
  @@index([eventType])
  @@index([isBreached])
  @@map("ticket_sla_events")
}

enum SlaEventType {
  FIRST_RESPONSE
  RESOLUTION
  ESCALATION
}

// Support Agent Workload
model SupportAgentWorkload {
  id                String      @id @default(cuid())
  userId            String
  tenantId          String
  activeTickets     Int         @default(0)
  totalTickets      Int         @default(0)
  avgResponseTime   Float       @default(0) // Minutes
  avgResolutionTime Float       @default(0) // Minutes
  workloadScore     Float       @default(0) // Calculated workload score
  lastUpdated       DateTime    @default(now())

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([workloadScore])
  @@map("support_agent_workloads")
}

// Support SLA Configuration
model SupportSlaConfig {
  id                String      @id @default(cuid())
  tenantId          String
  slaLevel          SlaLevel
  priority          TicketPriority
  firstResponseTime Int         // Minutes
  resolutionTime    Int         // Minutes
  escalationTime    Int         // Minutes
  businessHoursOnly Boolean     @default(false)
  businessHours     Json?       // Business hours configuration
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([tenantId, slaLevel, priority])
  @@index([tenantId])
  @@map("support_sla_configs")
}

// Support Company Assignment Rules
model SupportCompanyRule {
  id                String      @id @default(cuid())
  tenantId          String
  companyName       String
  routingRules      Json        // Routing conditions and rules
  assignedAgents    Json        // Array of user IDs
  priority          Int         @default(1)
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([tenantId, companyName])
  @@index([tenantId])
  @@index([companyName])
  @@map("support_company_rules")
}

// GDPR Compliance Models

// Consent Records
model ConsentRecord {
  id                String      @id @default(cuid())
  tenantId          String
  subscriberId      String?
  email             String
  consentType       ConsentType
  status            ConsentStatus @default(GIVEN)
  purpose           Json        // Array of DataProcessingPurpose
  legalBasis        String
  consentDate       DateTime    @default(now())
  withdrawalDate    DateTime?
  expiryDate        DateTime?
  ipAddress         String?
  userAgent         String?
  consentMethod     String      // 'form', 'email', 'api', etc.
  consentText       String      @db.LongText
  version           String
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([tenantId])
  @@index([email])
  @@index([consentType])
  @@index([status])
  @@index([subscriberId])
  @@map("consent_records")
}

enum ConsentType {
  MARKETING_EMAILS
  ANALYTICS_TRACKING
  THIRD_PARTY_SHARING
  PROFILING
  AUTOMATED_DECISION_MAKING
}

enum ConsentStatus {
  GIVEN
  WITHDRAWN
  PENDING
  EXPIRED
}

// GDPR Requests
model GdprRequest {
  id                String      @id @default(cuid())
  tenantId          String
  requestType       GdprRequestType
  status            GdprRequestStatus @default(PENDING)
  email             String
  firstName         String?
  lastName          String?
  requestDate       DateTime    @default(now())
  completionDate    DateTime?
  verificationToken String
  verificationExpiry DateTime
  isVerified        Boolean     @default(false)
  requestDetails    Json?
  responseData      Json?
  rejectionReason   String?
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([tenantId])
  @@index([email])
  @@index([requestType])
  @@index([status])
  @@index([verificationToken])
  @@map("gdpr_requests")
}

enum GdprRequestType {
  ACCESS
  RECTIFICATION
  ERASURE
  PORTABILITY
  RESTRICTION
  OBJECTION
}

enum GdprRequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  EXPIRED
}

// Data Processing Activities (for compliance documentation)
model DataProcessingActivity {
  id                String      @id @default(cuid())
  tenantId          String
  activityName      String
  purpose           Json        // Array of DataProcessingPurpose
  legalBasis        String
  dataCategories    Json        // Array of data categories
  dataSubjects      Json        // Array of data subject categories
  recipients        Json?       // Array of data recipients
  thirdCountries    Json?       // Array of third countries
  retentionPeriod   String
  securityMeasures  Json        // Array of security measures
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([tenantId])
  @@index([isActive])
  @@map("data_processing_activities")
}

// Privacy Policy Versions
model PrivacyPolicy {
  id                String      @id @default(cuid())
  tenantId          String
  version           String
  content           String      @db.LongText
  effectiveDate     DateTime
  isActive          Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([tenantId, version])
  @@index([tenantId])
  @@index([isActive])
  @@index([effectiveDate])
  @@map("privacy_policies")
}

// Package Management System
model Package {
  id                String      @id @default(cuid())
  name              String
  description       String?     @db.LongText
  shortDescription  String?
  category          PackageCategory @default(EMAIL_MARKETING)
  
  // Pricing
  price             Float
  currency          String      @default("USD")
  billingCycle      PackageBillingCycle @default(MONTHLY)
  setupFee          Float?      @default(0)
  trialDays         Int?        @default(0)
  
  // Feature limitations and quotas
  features          Json        // Available features
  quotas            Json        // Usage limits (emails, subscribers, campaigns, etc.)
  
  // Package status and visibility
  status            PackageStatus @default(DRAFT)
  isPublic          Boolean     @default(false)
  isFeatured        Boolean     @default(false)
  
  // Creator information (admin company)
  creator           Tenant      @relation("PackageCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId         String
  
  // Commission and revenue sharing
  platformCommission Float     @default(10.0) // Percentage
  creatorRevenue    Float       @default(90.0) // Percentage
  
  // Marketing and display
  images            Json?       // Array of image URLs
  tags              Json?       // Array of tags for categorization
  highlights        Json?       // Key selling points
  
  // Analytics
  totalViews        Int         @default(0)
  totalPurchases    Int         @default(0)
  totalRevenue      Float       @default(0)
  averageRating     Float?
  totalReviews      Int         @default(0)
  
  // SEO and metadata
  slug              String?     @unique
  metaTitle         String?
  metaDescription   String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relationships
  purchases         PackagePurchase[]
  sales             PackageSale[]
  reviews           PackageReview[]
  analytics         PackageAnalytics[]
  templates         PackageTemplate[]

  @@index([creatorId])
  @@index([status])
  @@index([category])
  @@index([isPublic])
  @@index([isFeatured])
  @@index([slug])
  @@map("packages")
}

enum PackageCategory {
  EMAIL_MARKETING
  AUTOMATION
  ANALYTICS
  INTEGRATIONS
  TEMPLATES
  CUSTOM
}

enum PackageBillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
  ONE_TIME
}

enum PackageStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  SUSPENDED
  ARCHIVED
}

// Package Purchases (customers buying packages)
model PackagePurchase {
  id                String      @id @default(cuid())
  package           Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId         String
  customer          Tenant      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId        String
  
  // Purchase details
  purchasePrice     Float
  currency          String      @default("USD")
  billingCycle      PackageBillingCycle
  status            PurchaseStatus @default(ACTIVE)
  
  // Subscription management
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean     @default(false)
  trialEnd          DateTime?
  
  // Payment information
  paymentProvider   String?
  customerPaymentId String?     // Payment provider customer ID
  subscriptionPaymentId String? // Payment provider subscription ID
  
  // Usage tracking
  quotas            Json        // Purchased quotas
  usage             Json        // Current usage
  
  // Metadata
  metadata          Json?
  notes             String?     @db.LongText
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relationships
  invoices          PackageInvoice[]
  usageHistory      PackageUsageHistory[]
  sale              PackageSale?

  @@index([packageId])
  @@index([customerId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("package_purchases")
}

enum PurchaseStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELLED
  SUSPENDED
  EXPIRED
}

// Package Sales (tracking sales for admin companies)
model PackageSale {
  id                String      @id @default(cuid())
  package           Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId         String
  seller            Tenant      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId          String
  purchase          PackagePurchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId        String      @unique
  
  // Revenue breakdown
  totalAmount       Float
  platformCommission Float
  sellerRevenue     Float
  currency          String      @default("USD")
  
  // Commission status
  commissionStatus  CommissionStatus @default(PENDING)
  commissionPaidAt  DateTime?
  
  // Payment tracking
  paymentProvider   String?
  transactionId     String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([packageId])
  @@index([sellerId])
  @@index([commissionStatus])
  @@index([createdAt])
  @@map("package_sales")
}

enum CommissionStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  DISPUTED
}

// Package Reviews and Ratings
model PackageReview {
  id                String      @id @default(cuid())
  package           Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId         String
  reviewer          Tenant      @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId        String
  
  // Review content
  rating            Int         // 1-5 stars
  title             String?
  content           String?     @db.LongText
  
  // Review status
  status            ReviewStatus @default(PUBLISHED)
  isVerifiedPurchase Boolean    @default(false)
  
  // Moderation
  moderatedBy       String?     // User ID who moderated
  moderatedAt       DateTime?
  moderationNotes   String?     @db.LongText
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([packageId, reviewerId])
  @@index([packageId])
  @@index([reviewerId])
  @@index([status])
  @@index([rating])
  @@map("package_reviews")
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  HIDDEN
  REJECTED
}

// Package Analytics
model PackageAnalytics {
  id                String      @id @default(cuid())
  package           Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId         String
  date              DateTime    @db.Date
  
  // View metrics
  views             Int         @default(0)
  uniqueViews       Int         @default(0)
  
  // Conversion metrics
  purchases         Int         @default(0)
  revenue           Float       @default(0)
  conversionRate    Float       @default(0)
  
  // Traffic sources
  trafficSources    Json?       // Breakdown of traffic sources
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([packageId, date])
  @@index([packageId])
  @@index([date])
  @@map("package_analytics")
}

// Package Templates (pre-built package configurations)
model PackageTemplate {
  id                String      @id @default(cuid())
  name              String
  description       String?     @db.LongText
  category          PackageCategory
  
  // Template configuration
  templateData      Json        // Package configuration template
  features          Json        // Default features
  quotas            Json        // Default quotas
  
  // Pricing suggestions
  suggestedPrice    Float?
  priceRange        Json?       // Min/max price suggestions
  
  // Template metadata
  isOfficial        Boolean     @default(false) // Created by platform
  usageCount        Int         @default(0)
  
  // Associated package (if created from template)
  package           Package?    @relation(fields: [packageId], references: [id], onDelete: SetNull)
  packageId         String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([category])
  @@index([isOfficial])
  @@index([packageId])
  @@map("package_templates")
}

// Package Invoices
model PackageInvoice {
  id                String      @id @default(cuid())
  purchase          PackagePurchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId        String
  
  // Invoice details
  invoiceNumber     String      @unique
  status            PackageInvoiceStatus @default(PENDING)
  currency          String      @default("USD")
  
  // Amounts
  subtotal          Float
  taxAmount         Float       @default(0)
  discountAmount    Float       @default(0)
  total             Float
  amountPaid        Float       @default(0)
  amountDue         Float
  
  // Dates
  issueDate         DateTime    @default(now())
  dueDate           DateTime
  paidAt            DateTime?
  
  // Billing period
  periodStart       DateTime
  periodEnd         DateTime
  
  // Line items and details
  lineItems         Json        // Array of invoice line items
  billingAddress    Json?
  
  // Payment provider info
  paymentProvider   String?
  providerInvoiceId String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([purchaseId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@map("package_invoices")
}

enum PackageInvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

// Package Usage History
model PackageUsageHistory {
  id                String      @id @default(cuid())
  purchase          PackagePurchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId        String
  
  // Usage tracking
  resourceType      String      // emails, subscribers, campaigns, etc.
  usageAmount       Int
  quotaLimit        Int
  date              DateTime    @db.Date
  
  // Overage tracking
  isOverage         Boolean     @default(false)
  overageAmount     Int         @default(0)
  overageCharge     Float       @default(0)
  
  createdAt         DateTime    @default(now())

  @@unique([purchaseId, resourceType, date])
  @@index([purchaseId])
  @@index([resourceType])
  @@index([date])
  @@index([isOverage])
  @@map("package_usage_history")
}

// Security Monitoring Models

// Login Attempts Tracking
model LoginAttempt {
  id                String      @id @default(cuid())
  email             String
  ipAddress         String
  userAgent         String?
  success           Boolean
  failureReason     String?     // INVALID_CREDENTIALS, ACCOUNT_LOCKED, IP_BLOCKED, etc.
  location          Json?       // GeoIP data
  riskScore         Float       @default(0)
  blockedBySystem   Boolean     @default(false)
  metadata          Json?       // Additional context
  createdAt         DateTime    @default(now())

  @@index([email])
  @@index([ipAddress])
  @@index([success])
  @@index([createdAt])
  @@index([riskScore])
  @@index([blockedBySystem])
  @@map("login_attempts")
}

// Security Threats Detection
model SecurityThreat {
  id                String      @id @default(cuid())
  type              SecurityThreatType
  severity          SecuritySeverity @default(LOW)
  description       String
  userId            String?
  tenantId          String?
  ipAddress         String?
  userAgent         String?
  location          Json?       // GeoIP data
  metadata          Json?       // Additional threat context
  isActive          Boolean     @default(true)
  detectedAt        DateTime    @default(now())
  resolvedAt        DateTime?
  resolvedBy        String?     // User ID who resolved the threat
  resolution        String?     // Resolution notes

  @@index([type])
  @@index([severity])
  @@index([userId])
  @@index([tenantId])
  @@index([isActive])
  @@index([detectedAt])
  @@map("security_threats")
}

enum SecurityThreatType {
  BRUTE_FORCE_ATTACK
  CREDENTIAL_STUFFING
  SUSPICIOUS_LOGIN_PATTERN
  MULTIPLE_FAILED_LOGINS
  UNUSUAL_LOCATION_ACCESS
  RAPID_IP_CHANGES
  CONCURRENT_SESSION_ABUSE
  ACCOUNT_ENUMERATION
  SESSION_HIJACKING
  PRIVILEGE_ESCALATION
  DATA_EXFILTRATION
  AUTOMATED_ATTACK
}

// IP-based Access Control
model IpRestriction {
  id                String      @id @default(cuid())
  ipAddress         String
  type              IpRestrictionType
  tenantId          String?     // null for global restrictions
  reason            String?
  expiresAt         DateTime?   // null for permanent restrictions
  createdBy         String      // User ID who created the restriction
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([ipAddress])
  @@index([type])
  @@index([tenantId])
  @@index([expiresAt])
  @@index([createdBy])
  @@map("ip_restrictions")
}

enum IpRestrictionType {
  ALLOW
  BLOCK
}

// Geolocation-based Access Control
model GeolocationRestriction {
  id                String      @id @default(cuid())
  countryCode       String      // ISO 3166-1 alpha-2 country code
  type              GeolocationRestrictionType
  tenantId          String
  reason            String?
  createdBy         String      // User ID who created the restriction
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([countryCode])
  @@index([type])
  @@index([tenantId])
  @@index([createdBy])
  @@map("geolocation_restrictions")
}

enum GeolocationRestrictionType {
  ALLOW
  BLOCK
}

// Security Alerts and Notifications
model SecurityAlert {
  id                String      @id @default(cuid())
  type              SecurityAlertType
  severity          SecuritySeverity
  title             String
  description       String      @db.LongText
  userId            String?     // Target user for the alert
  tenantId          String?     // Target tenant for the alert
  isRead            Boolean     @default(false)
  readAt            DateTime?
  actionRequired    Boolean     @default(false)
  actionTaken       Boolean     @default(false)
  actionTakenAt     DateTime?
  actionTakenBy     String?     // User ID who took action
  metadata          Json?       // Additional alert context
  expiresAt         DateTime?   // Auto-dismiss date
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([type])
  @@index([severity])
  @@index([userId])
  @@index([tenantId])
  @@index([isRead])
  @@index([actionRequired])
  @@index([createdAt])
  @@map("security_alerts")
}

enum SecurityAlertType {
  ACCOUNT_LOCKOUT
  SUSPICIOUS_LOGIN
  BRUTE_FORCE_DETECTED
  UNUSUAL_LOCATION
  MULTIPLE_FAILED_LOGINS
  IP_BLOCKED
  GEOLOCATION_BLOCKED
  SESSION_HIJACK_ATTEMPT
  PRIVILEGE_ESCALATION
  DATA_BREACH_ATTEMPT
  SYSTEM_COMPROMISE
}

// Automated Security Responses
model SecurityResponse {
  id                String      @id @default(cuid())
  triggerType       SecurityThreatType
  responseType      SecurityResponseType
  tenantId          String?     // null for global responses
  isActive          Boolean     @default(true)
  conditions        Json        // Conditions that trigger the response
  actions           Json        // Actions to take when triggered
  cooldownPeriod    Int?        // Seconds before response can trigger again
  lastTriggeredAt   DateTime?
  triggerCount      Int         @default(0)
  createdBy         String      // User ID who created the response
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([triggerType])
  @@index([responseType])
  @@index([tenantId])
  @@index([isActive])
  @@index([createdBy])
  @@map("security_responses")
}

enum SecurityResponseType {
  IMMEDIATE
  DELAYED
  ESCALATED
  CONDITIONAL
}

// Security Configuration per Tenant
model SecurityConfig {
  id                        String      @id @default(cuid())
  tenantId                  String      @unique
  
  // Login attempt limits
  maxFailedAttempts         Int         @default(5)
  lockoutDuration           Int         @default(900) // 15 minutes in seconds
  bruteForceThreshold       Int         @default(10)
  bruteForceWindow          Int         @default(300) // 5 minutes in seconds
  
  // Session security
  requireMfaForHighRisk     Boolean     @default(true)
  highRiskThreshold         Int         @default(30)
  sessionTimeoutWarning     Int         @default(300) // 5 minutes in seconds
  maxConcurrentSessions     Int         @default(5)
  
  // IP and location restrictions
  enableIpRestrictions      Boolean     @default(false)
  enableGeoRestrictions     Boolean     @default(false)
  allowedCountries          Json?       // Array of allowed country codes
  blockedCountries          Json?       // Array of blocked country codes
  
  // Monitoring settings
  enableThreatDetection     Boolean     @default(true)
  enableAnomalyDetection    Boolean     @default(true)
  alertThreshold            SecuritySeverity @default(MEDIUM)
  
  // Automated responses
  enableAutoResponse        Boolean     @default(false)
  autoResponseActions       Json?       // Array of automated response configurations
  
  // Notification settings
  securityEmailAlerts       Boolean     @default(true)
  alertRecipients           Json?       // Array of email addresses for alerts
  
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  @@index([tenantId])
  @@map("security_configs")
}

